from typing import Annotated

from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
import os
from langchain.chat_models import init_chat_model
from typing_extensions import TypedDict
from langchain_ollama import ChatOllama
from lib.lattice import Lattice
from lib.tools import create_tools, generate_tools_description
from langchain_core.messages import ToolMessage
from langgraph.checkpoint.memory import InMemorySaver
import json

lattice_session = ""
lattice_client = Lattice()
print(f"Session: {lattice_session}")
lattice_client.authenticate("mcp-user", lattice_session)
tools = create_tools(lattice_client)
memory = InMemorySaver()

class State(TypedDict):
    # Messages have the type "list". The `add messages` function
    # in the annotation defines how this state key should be updated
    # (in this case, it appends messages to the list, rather than overwriting them)
    messages: Annotated[list, add_messages]

class BasicToolNode:
    """A node that runs the tools requested in the last AIMessage."""

    def __init__(self, tools: list) -> None:
        self.tools_by_name = {tool.name: tool for tool in tools}

    def __call__(self, inputs: dict):
        if messages := inputs.get("messages", []):
            message = messages[-1]
        else:
            raise ValueError("No message found in input")
        outputs = []
        for tool_call in message.tool_calls:
            print(tool_call)
            tool_result = self.tools_by_name[tool_call["name"]].invoke(
                tool_call["args"]
            )
            outputs.append(
                ToolMessage(
                    content=json.dumps(tool_result),
                    name=tool_call["name"],
                    tool_call_id=tool_call["id"],
                )
            )
        return {"messages": outputs}

def stream_graph_updates(user_input: str):
    """
    Thread ID specifies the thread in which the conversation
    is happening and will maintain state of user inputs.
    """
    config = {"configurable": {"thread_id": "1"}}
    events = graph.stream(
        {"messages": [{"role": "user", "content": user_input}]},
        config
    )
    for event in events:
        for value in event.values():
            print("Assistant:", value['messages'][-1].content)

def chatbot(state: State):
    return {"messages": [llm.invoke(state['messages'])]}

def route_tools(
        state: State,
):
    if isinstance(state, list):
        ai_message = state[-1]
    elif messages := state.get("messages", []):
        ai_message = messages[-1]
    else:
        raise ValueError(f"No messages found in input state to tool_edge: {state}")
    if hasattr(ai_message, "tool_calls") and len(ai_message.tool_calls) > 0:
        return "tools"
    return END

graph_builder = StateGraph(State)
llm = ChatOllama(model='qwen-3.0-a3b-16k').bind_tools(tools)
tool_node = BasicToolNode(tools=tools)

graph_builder.add_conditional_edges(
    "chatbot",
    route_tools,
    {"tools": "tools", END: END}
)
graph_builder.add_node("chatbot", chatbot)
graph_builder.add_node("tools", tool_node)
graph_builder.add_edge(START, "chatbot")
graph_builder.add_edge("chatbot", END)
graph = graph_builder.compile(checkpointer=memory)

while True:
    user_input = input("User: ")
    if user_input.lower() in ["quit", "exit", "q"]:
        print("Laterz!")
        break
    stream_graph_updates(f"/no_think {user_input}")

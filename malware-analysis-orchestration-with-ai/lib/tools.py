from langchain.tools import Tool
from langchain_core.tools import tool
from pydantic import BaseModel, Field
from typing import Optional
from .lattice import Lattice

def create_tools(lattice_client: Lattice):
    """Create and return all the tools for binary analysis"""
    
    @tool
    def get_all_function_names() -> str:
        """Get all function names in the binary. No parameters required. Returns a list of function names."""
        response = lattice_client.get_all_function_names()
        if response and 'status' in response and response['status'] == 'success':
            return '\n'.join([f"{func['name']}" for func in response['function_names']])
        return "Error: Could not retrieve function names"

    @tool
    def update_function_name(name: str = Field(description="Current name of the function"), 
                           new_name: str = Field(description="New name for the function")) -> str:
        """Update function name."""
        response = lattice_client.update_function_name(name, new_name)
        if response and 'status' in response and response['status'] == 'success':
            return f"Function '{name}' renamed to '{new_name}'"
        return f"Error: Could not rename function '{name}'"

    @tool
    def add_comment_to_address(address: str = Field(description="Address to add comment to"), 
                             comment: str = Field(description="Comment text to add")) -> str:
        """Add comment to address."""
        response = lattice_client.add_comment_to_address(address, comment)
        if response and 'status' in response and response['status'] == 'success':
            return f"Comment added to address '{address}'"
        return f"Error: Could not add comment to address '{address}'"

    @tool
    def add_comment_to_function(name: str = Field(description="Name of the function"), 
                              comment: str = Field(description="Comment text to add")) -> str:
        """Add comment to function."""
        response = lattice_client.add_comment_to_function(name, comment)
        if response and 'status' in response and response['status'] == 'success':
            return f"Comment added to function '{name}'"
        return f"Error: Could not add comment to function '{name}'"

    @tool
    def get_function_disassembly(name: str = Field(description="Name of the function")) -> str:
        """Get disassembly for a function."""
        response = lattice_client.get_function_disassembly(name)
        if response and 'status' in response and response['status'] == 'success':
            return '\n'.join([f"{block['address']}: {block['text']}" for block in response['disassembly']])
        return f"Error: Could not retrieve disassembly for '{name}'"

    @tool
    def get_function_pseudocode(name: str = Field(description="Name of the function")) -> str:
        """Get pseudocode for a function."""
        response = lattice_client.get_function_pseudocode(name)
        if response and 'status' in response and response['status'] == 'success':
            return '\n'.join([f"{block['address']}: {block['text']}" for block in response['pseudocode']])
        return f"Error: Could not retrieve pseudocode for '{name}'"

    @tool
    def get_function_variables(name: str = Field(description="Name of the function")) -> str:
        """Get variables for a function."""
        response = lattice_client.get_function_variables(name)
        if response and 'status' in response and response['status'] == 'success':
            rstr = 'Parameters: ' + '\n'.join([f"{param['name']}: {param['type']}" for param in response['variables']['parameters']]) \
            + '\nLocal Variables: ' + '\n'.join([f"{var['name']}: {var['type']}" for var in response['variables']['local_variables']]) \
            + '\nGlobal Variables: ' + '\n'.join([f"{var['name']}: {var['type']}" for var in response['variables']['global_variables']])
            return rstr
        return f"Error: Could not retrieve variables for '{name}'"

    @tool
    def update_variable_name(name: str = Field(description="Name of the function"), 
                           old_name: str = Field(description="Current name of the variable"), 
                           new_name: str = Field(description="New name for the variable")) -> str:
        """Update variable name in a function."""
        response = lattice_client.update_variable_name(name, old_name, new_name)
        if response and 'status' in response and response['status'] == 'success':
            return f"Variable '{old_name}' in function '{name}' renamed to '{new_name}'"
        return f"Error: Could not rename variable '{old_name}' in function '{name}'"

    @tool
    def get_global_variable_data(function_name: str = Field(description="Function name that the global variable is referenced in"), 
                                 name: str = Field(description="Name of the global variable")) -> str:
        """Get data for a global variable."""
        response = lattice_client.get_global_variable_data(function_name, name)
        if response and 'status' in response and response['status'] == 'success':
            return str(response['message'])
        return f"Error: Could not retrieve data for global variable '{name}'"

    @tool
    def get_cross_references_to_function(name: str = Field(description="Name of the function")) -> str:
        """Get cross-references for a function."""
        response = lattice_client.get_cross_references_to_function(name)
        if response and 'status' in response and response['status'] == 'success':
            return '\n'.join([f"{ref['function']}" for ref in response['cross_references']])
        return f"Error: Could not retrieve cross-references for '{name}'"

    # Return list of tool functions
    return [
        get_all_function_names,
        update_function_name,
        add_comment_to_address,
        add_comment_to_function,
        get_function_disassembly,
        get_function_pseudocode,
        get_function_variables,
        update_variable_name,
        get_global_variable_data,
        get_cross_references_to_function
    ]

def generate_tools_description(tools_list):
    """Generate a description of available tools for the planner"""
    description = "Available tools for binary analysis:\n\n"
    for i, tool in enumerate(tools_list, 1):
        description += f"{i}. {tool.name} - {tool.description}\n"
    description += "\nUse these tools in your plan steps to analyze the binary effectively."
    return description 